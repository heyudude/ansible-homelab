---
- hosts: spsrv
  gather_facts: no

  vars:
    resource_type: vm
    vmid: 111
    hostname: gw-wg
    comment: PIA WireGuard
    net_ip: 192.168.13.2
    cores: 1
    mem: 512
    disk_size: 5
    vm_other_options: >
      --onboot 1

  roles:
    - { role: pve_manager }
    - { role: portainer_api }


- hosts: gw-wg
  gather_facts: yes

  vars:
    sshd_permit_root_login: "no"
    sshd_authorized_keys_user: ubuntu

    wg_pia_name: wg-pia
    wg_pia_image: thrnz/docker-wireguard-pia:latest
    wg_pia_user: "{{ inventory__piavpn_user }}"
    wg_pia_pass: "{{ inventory__piavpn_pass }}"
    wg_pia_location: swiss
    wg_pia_local_network: 192.168.0.0/16
    wg_pia_firewall: "0"
    wg_pia_fwd_iface: eth0

    wg_access_name: wg-access-server
    wg_access_image: ghcr.io/freifunkmuc/wg-access-server:master
    wg_access_admin_pass: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          65336666396631663163306235666330666535643636326238646434376236333234316534383561
          3938366364646663323234643861326631323664343837310a313731636438613963316331363134
          65653837633638623630393965353462313966623337386562346232353739356535373630346132
          3866633937353864650a616132623632636532393435343732623632316437386332336633346263
          32336534656535653263366638356561633763663432303232396432643264623261
    wg_access_private_key: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          32623561303866613565316133356233623032396565346664336137636164616438656361613333
          3466333330303833643665383836633833383933336130370a343166346430353031613134313434
          33613065353534303163626339393036343264316366386139653037393133333539306262333763
          6532363735363431360a653435383838613939323163373338636431333030303438616533326635
          31633338356331653265333038373434333632616237373430643633386466313230306430356339
          6461643865376261653939626430643936366236323831363436

  pre_tasks:
    - name: Wait for cloud-init to finish
      wait_for:
        path: /var/lib/cloud/instance/boot-finished

  roles:
    - { role: common/packages, become: true }
    - { role: spirkaa.zsh_prezto }
    - { role: spirkaa.nano }
    - { role: common/sshd, become: true }
    - { role: common/wireguard, become: true }
    - { role: common/docker, become: true }

  tasks:
    - name: Flush handlers
      meta: flush_handlers

    - name: Set sysctl entry
      sysctl:
        name: net.ipv4.conf.all.src_valid_mark
        value: "1"
        sysctl_set: yes
        reload: yes
        state: present
      become: true

    - name: Start {{ wg_pia_name }} container
      docker_container:
        name: "{{ wg_pia_name }}"
        image: "{{ wg_pia_image }}"
        pull: yes
        env:
          LOC: "{{ wg_pia_location }}"
          USER: "{{ wg_pia_user }}"
          PASS: "{{ wg_pia_pass }}"
          LOCAL_NETWORK: "{{ wg_pia_local_network }}"
          FIREWALL: "{{ wg_pia_firewall }}"
          FWD_IFACE: "{{ wg_pia_fwd_iface }}"
        volumes:
          - "pia:/pia"
          - "pia-shared:/pia-shared"
        capabilities:
          - net_admin
        network_mode: host
        healthcheck:
          test: ["CMD-SHELL", "curl -fsS --retry 3 {{ inventory__healthchecksio_url }}/wg-pia || exit 1"]
          interval: 60s
          timeout: 20s
          retries: 1
        restart_policy: unless-stopped
        state: started
      no_log: true
      become: true

    - name: Start {{ wg_access_name }} container
      docker_container:
        name: "{{ wg_access_name }}"
        image: "{{ wg_access_image }}"
        pull: yes
        env:
          WG_LOG_LEVEL: "info"
          WG_VPN_CIDRV6: "0"
          WG_ADMIN_PASSWORD: "{{ wg_access_admin_pass }}"
          WG_WIREGUARD_PRIVATE_KEY: "{{ wg_access_private_key }}"
          WG_WIREGUARD_INTERFACE: "wg1"
          WG_EXTERNAL_HOST: "vpn.devmem.ru"
          WG_WIREGUARD_PORT: "51821"
          WG_IPV4_NAT_ENABLED: "false"
          WG_VPN_CLIENT_ISOLATION: "true"
          WG_VPN_ALLOWED_IPS: "0.0.0.0/0"
        volumes:
          - "wg-access-server-data:/data"
        privileged: yes
        network_mode: host
        devices:
          - "/dev/net/tun:/dev/net/tun"
        restart_policy: unless-stopped
        state: started
      no_log: true
      become: true
