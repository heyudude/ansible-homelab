---
- name: gitea - ssh passthrough - create group
  group:
    name: "{{ gitea_ssh_user }}"
    gid: "{{ pgid }}"
  tags: gitea

- name: gitea - ssh passthrough - create user
  user:
    name: "{{ gitea_ssh_user }}"
    uid: "{{ puid }}"
    group: "{{ gitea_ssh_user }}"
    generate_ssh_key: yes
    password: ""
    update_password: on_create
  no_log: true
  tags: gitea

- name: gitea - ssh passthrough - get pub key of created user
  command: >
    cat /home/git/.ssh/id_rsa.pub
  register: git_key
  changed_when: false
  tags: gitea

- name: gitea - ssh passthrough - add pub key to authorized_keys
  lineinfile:
    path: /home/git/.ssh/authorized_keys
    line: no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty {{ git_key.stdout }}
    owner: "{{ gitea_ssh_user }}"
    group: "{{ gitea_ssh_user }}"
    mode: 0600
    create: yes
    state: present
  tags: gitea

- name: gitea - ssh passthrough - copy files (fake host gitea command)
  copy:
    src: files/gitea
    dest: /usr/local/bin/gitea
    mode: 0755
  tags: gitea

- name: gitea - create dir
  file:
    path: "{{ gitea_app_data_path_host }}/conf"
    state: directory
    recurse: yes
  tags: gitea

- name: gitea - copy files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ puid }}"
    group: "{{ pgid }}"
    mode: 0600
  loop:
    - { src: app.ini.j2, dest: "{{ gitea_app_data_path_host }}/conf/app.ini" }
  notify: gitea - restart
  tags: gitea

- name: gitea - db - start
  docker_container:
    name: gitea-db
    image: "{{ gitea_db_image }}"
    pull: yes
    env:
      MYSQL_ROOT_PASSWORD: "{{ gitea_db_root_pass }}"
      MYSQL_DATABASE: "{{ gitea_db_user }}"
      MYSQL_USER: "{{ gitea_db_user }}"
      MYSQL_PASSWORD: "{{ gitea_db_pass }}"
      MYSQL_CHARSET: "utf8mb4"
      MYSQL_COLLATION: "utf8mb4_unicode_ci"
    volumes:
      - "{{ app_path }}/gitea/db:/var/lib/mysql"
    restart_policy: unless-stopped
    state: started
  no_log: true
  tags: gitea

- name: gitea - start
  docker_container:
    name: gitea
    image: "{{ gitea_image }}"
    pull: yes
    ports:
      - "3000:3000"
      - "127.0.0.1:2222:22"
    env:
      USER_UID: "{{ puid }}"
      USER_GID: "{{ pgid }}"
      GNUPGHOME: "{{ gitea_repository_root }}/.gnupg"
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
      - "/home/git/.ssh/:/data/git/.ssh"
      - "{{ app_path }}/gitea/data:/data"
    links:
      - "gitea-db:gitea-db"
    restart_policy: unless-stopped
    state: started
  register: gitea_start
  no_log: true
  tags: gitea

- name: gitea - gpg - check if key already exists
  command: >
    docker exec -u git gitea sh -c \
      'gpg --list-secret-keys | grep "gitea"'
  register: gpg_key
  changed_when: false
  failed_when: gpg_key.rc == 2
  tags: gitea

- block:
    - name: gitea - gpg - copy key template
      copy:
        src: files/gen-key-script
        dest: "{{ gitea_repository_root_host }}/.gnupg/gen-key-script"
        owner: "{{ gitea_ssh_user }}"
        group: "{{ gitea_ssh_user }}"
        mode: 0600
      tags: gitea

    - name: gitea - gpg - generate key
      command: >
        docker exec -u git gitea sh -c \
          'gpg --batch --gen-key {{ gitea_repository_root }}/.gnupg/gen-key-script'
      tags: gitea

    - name: gitea - gpg - delete key template
      file:
        path: "{{ gitea_repository_root_host }}/.gnupg/gen-key-script"
        state: absent
      tags: gitea

    - name: gitea - gpg - get key id
      command: >
        docker exec -u git gitea sh -c \
          'gpg -k --keyid-format SHORT | grep "pub" | awk "{printf \$2}" | awk -F/ "{printf \$2}"'
      register: gpg_key_id
      changed_when: false
      tags: gitea

    - name: gitea - gpg - configure git signing
      command: >
        docker exec -u git gitea sh -c \
          '{{ item }}'
      loop:
        - git config --file {{ gitea_repository_root }}/.gitconfig user.signingkey {{ gpg_key_id.stdout }}
        - git config --file {{ gitea_repository_root }}/.gitconfig commit.gpgsign true
      notify: gitea - restart
      tags: gitea
  when: gpg_key is defined and not gpg_key.stdout
