#!/bin/bash

##############################################################################
# An rclone backup script by Jared Males (jaredmales@gmail.com)
#
# Copyright (C) 2018 Jared Males <jaredmales@gmail.com>
#
# This script is licensed under the terms of the MIT license.
# https://opensource.org/licenses/MIT
#
# Runs the 'rclone sync' command. Designed to be used as a cron job.
#
# 1) Backup Source
#    Edit the SRC variable below to point to the directory you want to backup.
#
# 2) Backup Destination
#    Edit the DEST variable to point to the remote and location (see rclone docs).
#
# 3) Excluding files and directories
#    Edit the EXCLUDEFILE variable below to point to a file listing files and directories to exclude.
#    See the rclone docs for the format.
#
#    Also, any directory can be excluded by adding an '.rclone-ignore' file to it without editing the exclude file.
#    This file can be empty. You can edit the name of this file with EXIFPRESENT below.
#
# 4) You can change the bandwidth limits by editing BWLIMT, which includes a timetable facility.
#    See rclone docs for more info.
#
# 5) Logs:
#    -- The output of rclone is written to the location specified by LOGFILE. This is rotated with savelog.
#       The details of synclog can be edited.
#    -- The log rotation, and start and stop times of this script, are written to the location specified by CRONLOG.
#       This isn't yet rotated, probably should be based on size.
#
##############################################################################

FILENAME=$(basename "$0")

#### rclone sync options

SRC={{ item.src }}
DEST={{ item.dest }}
EXCLUDE='{{ item.exclude | default('', true) }}'

MINAGE=15m
TRANSFERS=32
CHECKERS=32

# ---- Location of job log [will be rotated with savelog]
LOGFILE="/var/log/$FILENAME.log"
LOGS='-v --log-file='$LOGFILE

# ---- Location of cron log
CRONLOG=/var/log/rclone-jobs.log

###################################################
## Locking Boilerplate from https://gist.github.com/przemoc/571091
## Included under MIT License:
###################################################

## Copyright (C) 2009 Przemyslaw Pawelczyk <przemoc@gmail.com>
##
## This script is licensed under the terms of the MIT license.
## https://opensource.org/licenses/MIT
#
# Lockable script boilerplate

### HEADER ###

LOCKFILE="/tmp/$FILENAME"
LOCKFD=99

# PRIVATE
_lock()             { flock -$1 $LOCKFD; }
_no_more_locking()  { _lock u; _lock xn && rm -f $LOCKFILE; }
_prepare_locking()  { eval "exec $LOCKFD>\"$LOCKFILE\""; trap _no_more_locking EXIT; }

# ON START
_prepare_locking

# PUBLIC
exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock

###################################################
# End of locking code from Pawelczyk
###################################################

# make a log entry if we exit because locked
exit_on_lock()      { echo $(date -u)" | $FILENAME already running." >> $CRONLOG; exit 1; }

# Now check for lock
exlock_now || exit_on_lock
# We now have the lock.

# Rotate logs
savelog -n -c 7 $LOGFILE >> $CRONLOG

# Log startup
echo $(date)" | starting $FILENAME..." >> $CRONLOG

# Now do the work!
{% if item.type == "sync" %}
rclone sync $SRC $DEST $LOGS --transfers $TRANSFERS --checkers $CHECKERS --min-age $MINAGE --delete-excluded $EXCLUDE
{% elif item.type == "rcat" %}
tar -cf - $EXCLUDE --directory=$SRC . | pigz -p 4 | rclone rcat $DEST $LOGS --transfers $TRANSFERS --checkers $CHECKERS
{% endif %}
{{ item.post_cmd | default('', true) }}

# log success
echo $(date)" | completed $FILENAME." >> $CRONLOG

# release the lock
unlock

exit
